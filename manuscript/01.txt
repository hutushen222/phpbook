第 1 章 PHP 的生命周期
====================

在平常的 Web 环境中，我们并不需要单独启动 PHP，它一般都会作为一个模块自动加载到 Web Server 里面去，如 Apache 加载的 `php5.so`。只要我们启动了 Web Server，被一起加载的 PHP 便会和服务器一起解析被请求的 PHP 脚本。

当然，这不是绝对的，当我们以 FastCGI 模式运行 PHP 的时候，往往需要手工通过命令来启动 PHP 后端服务。

1.1 让我们从 SAPI 开始
--------------------

我们平时接触的最多的是 Web 模式下的 PHP，当然你也肯定知道 PHP 还有个 CLI 模式。其实无论哪种模式，PHP 的工作原理都是一样的，都是作为一种 SAPI 在运行（Server Application Programming Interface： the API used by PHP to interface with Web Servers）。当我们在终端敲入 `php` 这个命令时候，它使用的是“command line sapi”！它就像一个 mini 的 Web 服务器一样来支持 PHP 完成这个请求，请求完成后再重新把控制权交给终端。

简单来说，SAPI 就是 PHP 和外部环境的代理器。它把外部环境抽象后，为内部的 PHP 提供一套固定的，统一的接口，使得 PHP 自身实现能够不受错综复杂的外部环境影响，保持一定的独立性

更多内容参看来自 Laruence 的博客对 SAPI 的介绍： [深入理解 Zend SAPIs](http://www.laruence.com/2008/08/12/180.html)

1.2 PHP 的启动与终止
------------------

PHP 程序的启动可以看作有两个概念上的启动，终止也有两个概念上的终止。其中一个是 PHP 作为 Apache（拿它举例，板砖勿扔）的一个模块的启动与终止，这次启动 PHP 会初始化一些必要数据，比如与宿主 Apache 有关的，**并且这些数据是常驻内存的！** 终止与之相对。还有一个概念上的启动就是当 Apache 分配一个页面请求过来的时候，PHP 会有一次启动与终止，这也是我们最常讨论的一种。

现在我们主要来看一个 PHP 扩展的生命旅程是怎样走完这四个过程的。

在最初的初始化时候，就是 PHP 随着 Apache 的启动而诞生在内存里的时候，它会把自己所有已加载扩展的 `MINIT` 方法（全称 Module Initialization，是由每个模块自己定义的函数）都执行一遍。在这个时间里，扩展可以定义一些自己的常量、类、资源等所有会被用户端的 PHP 脚本用到的东西。但你要记住，这里定义的东东都会随着 Apache 常驻内存，可以被所有请求使用，直到 Apache 卸载掉 PHP 模块！

内核中预置了 `PHP_MINIT_FUNCTION` 宏函数，来帮助我们实现这个功能：

    // 抛弃作者那个例子，书才看两页整那样的例子太复杂了!
    // walu 是我扩展的名称
    int time_of_minit; // 在 MINIT() 中初始化，在每次页面请求中输出，看看是否变化
    PHP_MINIT_FUNCTION(walu)
    {
    	time_of_minit=time(NULL); // 我们在 MINIT 启动中对他初始化
    	return SUCCESS; // 返回 SUCCESS 代表正常，返回 FALIURE 就不会加载这个扩展了。
    }

当一个页面请求到来时候，PHP 会迅速的开辟一个新的环境，并重新扫描自己的各个扩展，遍历执行它们各自的 `RINIT` 方法（俗称 Request Initialization），这时候一个扩展可能会初始化在本次请求中会使用到的变量等，还会初始化等会儿用户端（即 PHP 脚本）中的变量之类的，内核预置了 `PHP_RINIT_FUNCTION()` 这个宏函数来帮我们实现这个功能：

    int time_of_rinit; // 在RINIT里初始化，看看每次页面请求的时候是否变化。
    PHP_RINIT_FUNCTION(walu)
    {
    	time_of_rinit=time(NULL);
    	return SUCCESS;
    }

好了，现在这个页面请求执行的差不多了，可能是顺利的走到了自己文件的最后，也可能是出师未捷，半道被用户给 die 或者 exit 了，这时候 PHP 便会启动回收程序，收拾这个请求留下的烂摊子。它这次会执行所有已加载扩展的 `RSHUTDOWN`（俗称 Request Shutdown）方法，这时候扩展可以抓紧利用内核中的变量表之类的做一些事情，因为一旦 PHP 把所有扩展的 `RSHUTDOWN` 方法执行完，便会释放掉这次请求使用过的所有东西，包括变量表的所有变量、所有在这次请求中申请的内存等等。

内核预置了 `PHP_RSHUTDOWN_FUNCTION` 宏函数来帮助我们实现这个功能

    PHP_RSHUTDOWN_FUNCTION(walu)
    {
    	FILE *fp=fopen("time_rshutdown.txt","a+");
    	fprintf(fp,"%ld\n",time(NULL)); // 让我们看看是不是每次请求结束都会在这个文件里追加数据
    	fclose(fp);
    	return SUCCESS;
    }

前面该启动的也启动了，该结束的也结束了，现在该 Apache 老人家歇歇的时候，当 Apache 通知 PHP 自己要 Stop 的时候，PHP 便进入 `MSHUTDOWN`（俗称 Module Shutdown）阶段。这时候 PHP 便会给所有扩展下最后通牒，如果哪个扩展还有未了的心愿，就放在自己 `MSHUTDOWN` 方法里，这可是最后的机会了，一旦 PHP 把扩展的 `MSHUTDOWN`执行完，便会进入自毁程序，这里一定要把自己擅自申请的内存给释放掉，否则就杯具了。

内核中预置了 `PHP_MSHUTDOWN_FUNCTION` 宏函数来帮助我们实现这个功能：

    PHP_MSHUTDOWN_FUNCTION(walu)
    {
    	FILE *fp=fopen("time_mshutdown.txt","a+");
    	fprintf(fp,"%ld\n",time(NULL));
    	return SUCCESS;
    }

这四个宏都是在 `walu.c` 里完成最终实现的，而他们的则是在 `/main/php.h` 里被定义的(其实也是调用的别的宏，本节最后我把这几个宏给展开了，供有需要的人查看)。

**好了，现在我们本节内容说完了，下面我们把所有的代码合在一起，并预测一下应该出现的结果：**

    // 这些代码都在 walu.c 里面，不在 .h 里

    int time_of_minit; // 在MINIT中初始化，在每次页面请求中输出，看看是否变化
    PHP_MINIT_FUNCTION(walu)
    {
    	time_of_minit=time(NULL); // 我们在MINIT启动中对他初始化
    	return SUCCESS;
    }

    int time_of_rinit; // 在RINIT里初始化，看看每次页面请求的时候是否变化。
    PHP_RINIT_FUNCTION(walu)
    {
    	time_of_rinit=time(NULL);
    	return SUCCESS;
    }

    PHP_RSHUTDOWN_FUNCTION(walu)
    {
    	FILE *fp=fopen("/cnan/www/erzha/time_rshutdown.txt","a+"); // 请确保文件可写，否则apache会莫名崩溃
    	fprintf(fp,"%d\n",time(NULL)); // 让我们看看是不是每次请求结束都会在这个文件里追加数据
    	fclose(fp);
    	return SUCCESS;
    }

    PHP_MSHUTDOWN_FUNCTION(walu)
    {
    	FILE *fp=fopen("/cnan/www/erzha/time_mshutdown.txt","a+"); // 请确保文件可写，否则apache会莫名崩溃
    	fprintf(fp,"%d\n",time(NULL));
    	return SUCCESS;
    }

    // 我们在页面里输出time_of_minit和time_of_rinit的值
    PHP_FUNCTION(walu_test)
    {
    	php_printf("%d&lt;br /&gt;",time_of_minit);
    	php_printf("%d&lt;br /&gt;",time_of_rinit);
    	return;
    }

* `time_of_minit` 的值每次请求都不变。
* `time_of_rinit` 的值每次请求都改变。
* 每次页面请求结束都会往 `time_rshutdown.txt` 中写入数据。
* 只有在 Apache 结束后 `time_mshutdown.txt` 才写入有数据。

> 多谢 [闸北陆小洪](http://weibo.com/showz) 指出的有关 `time_of_rinit` 的笔误。

上面便是 PHP 中典型的启动-终止模型，实际情况可能因为模式不同而有所变化，到底 PHP 的启动-终止会有多少种不同变化方式，请看下一节。

1.3 PHP 的生命周期
-----------------

一个 PHP 实例，无论通过 HTTP 请求调用的，还是从命令行启动的，都会向我们上一节说的那样，依次进行 Module init、Request init、Request Shutdown、Module shutdown 四个过程，当然之间还会执行脚本自己的逻辑。那么两种 init 和两种 shutdown 各会执行多少次、各自的执行频率有多少呢？这取决与 PHP 是用什么 SAPI 与宿主通信的。最常见的四种方式如下所列：

* 直接以 CLI/CGI 模式调用
* 多进程模式
* 多线程模式
* Embedded(嵌入式，在自己的C程序中调用Zend Engine)

### 1.3.1 CLI/CGI

CLI 和 CGI 的 SAPI 是相当特殊的，因为这时 PHP 的生命周期完全在一个单独的请求中完成。虽然简单，不过我们以前提过的两种 init 和两种 shutdown 仍然都会被执行。图 1.1 展示了 PHP 在这种模式下是怎么工作的。

![01-01](images/01fig01.jpg)

### 1.3.2 多进程模式

**[ps:书是2006年出版的，所以你应该理解作者说多进程是主流]**

PHP 最常见的工作方式便是编译成为 Apache2 的 Prefork MPM 或者 Apache1 的 APXS 模式，其它 Web 服务器也大多用相同的方式工作，在本书后面，把这种方式统一叫做多进程方式。给它起这个名字是有原因的，不是随便拍拍屁股拍拍脑袋定下来的。当 Apache 启动的时候，会立即把自己 fork 出好几个子进程，每一个进程都有自己独立的内存空间，也就代表了有自己独立的变量、函数等。在每个进程里的PHP的工作方式如下图所示：

![01-02](images/01fig02.jpg)

因为是 fork 出来的，所以各个进程间的数据是彼此独立，不会受到外界的干扰**（PS：fork 后可以用管道等方式实现进程间通信）**。这是一片独立天地，它允许每个子进程做任何事情，玩七十码、躲猫猫都没人管，办公室拿砍刀玩自杀也没事，下图展示了从 Apache 的视角来看多进程工作模式下的 PHP：

![01-03](images/01fig03.jpg)

### 1.3.3 多线程模式

随着时代的进步，PHP 越来越多的在多线程模式下工作，就像 IIS 的 isapi 和 Apache MPM worker **（支持混合的多线程多进程的多路处理模块）**。在这种模式下，只有一个服务器进程在运行着，但会同时运行很多线程，这样可以减少一些资源开销，像 Module init 和 Module shutdown 就只需要运行一次就行了，一些全局变量也只需要初始化一次，因为线程独具的特质，使得各个请求之间方便的共享一些数据成为可能。

> 其实多线程与 MINIT、MSHUTDOWN 只执行一次并没有什么联系，多进程模式下一样可以实现。

下图展示了在这种模式下PHP的工作流程：

![01-04](images/01fig04.jpg)

### 1.3.4 Embed

Embed SAPI 是一种比较特殊的 SAPI，容许你在 C/C++ 语言中调用 PHP/ZE 提供的函数。并且这种 SAPI 和上面的三种一样，按 Module Init、Request Init、Rshutdown、mshutdown 的流程执行着。当然，这只是其中一种情况。因为特定的应用有自己特殊的需求，只是在处理 PHP 脚本这个环节基本一致。

真正令 Emebed 模式独特的是因为它可能随时嵌入到某个程序里面去（**比如你的 test.exe 里**），然后被当作脚本的一部分在一个请求的时候执行。控制权在 PHP 和原程序间来回传递。关于嵌入式的 PHP 在第 20 章会有应用，到时我们再用实例介绍这个不经常使用的 SAPI

#### 关于Embed SAPI应用的文章

* [Laruence 大哥的使用 PHP Embed SAPI 实现 Opcodes 查看器](http://www.laruence.com/2008/09/23/539.html) </li>

1.4 线程安全
-----------

在 PHP 初期，是作为单进程的 CGI 来运行的，所以并没有考虑线程安全问题。我们可以随意的在全局作用域中设置变量并在程序中对他进行修改、访问，内核申请的资源如果没有正确的释放，也会在 CGI 进程结束后自动地被清理干净。

后来，PHP 被作为 Apache 多进程模式下的一个模块运行，但是这仍然把 PHP 局限在一个进程里，我们设置的全局变量，只要在每个请求之前将其正确的初始化，并在每个请求之后正确的清理干净，便不会带来什么麻烦。由于对于一个进程来说，同一个时间只能处理一个请求，所以这是内核中加入了针对每个请求的内存管理功能，来防止服务器资源利用出现错误。

随着使用在多线程模式的软件系统越来越多，PHP 内核中亟需一种新的资源管理方式，并最终在 PHP 内核中形成了一个新的抽象层：TSRM（Thread Safe Resource Management）。

### 线程安全与非线程安全

在一个没有线程的程序中，我们往往倾向于把全局变量声明在源文件的顶部，编辑器会自动的为它分配资源供我们在声明语句之下的程序逻辑中使用。

**（即使通过 fork() 出一个子进程，它也会重新申请一段内存，父子进程中的变量从此没有了任何联系）**

但是在一个多线程的程序中，如果我们需要每个线程都拥有自己独立的资源的话，便需要为每个线程独立开辟出一个区域来存放它们各自的资源，在使用资源的时候，每个线程便会只在自己的那一亩三分地里找，而不会拔了别人的庄稼。

### Thread-Safe Data Pools（线程安全的资源池？）

在扩展的 Module Init 里，扩展可以调用 `ts_allocate_id()` 来告诉 TRSM 自己需要多少资源。 TRSM 接收后更新系统使用的资源，并得到一个指向刚分配的那份资源的 id。

    typedef struct {
    	int sampleint;
    	char *samplestring;
    } php_sample_globals;
    int sample_globals_id;

    PHP_MINIT_FUNCTION(sample)
    {
        ts_allocate_id(&sample_globals_id,
            sizeof(php_sample_globals),
            (ts_allocate_ctor) php_sample_globals_ctor,
            (ts_allocate_dtor) php_sample_globals_dtor);
        return SUCCESS;
    }

当一个请求需要访问数据段的时候，扩展从TSRM层请求当前线程的资源池，以 `ts_allocate_id()` 返回的资源 ID 来获取偏移量。换句话说，在代码流中，你可能会在前面所说的MINIT语句中碰到 `SAMPLE_G(sampleint) = 5;` 这样的语句。在线程安全的构建下，这个语句通过一些宏扩展如下：

    (((php_sample_globals*)(*((void ***)tsrm_ls))[sample_globals_id-1])->sampleint = 5;

如果你看不懂上面的转换也不用沮丧，它已经很好的封装在 PHP API 中了，以至于许多开发者都不需要知道它怎样工作的。

### 当不在线程环境时

因为在 PHP 的线程安全构建中访问全局资源涉及到在线程数据池查找对应的偏移量，这是一些额外的负载，结果就是它比对应的非线程方式（直接从编译期已经计算好的真实的全局变量地址中取出数据）慢一些。
考虑上面的例子，这一次在非线程构建下：

    typedef struct {
        int sampleint;
        char *samplestring;
    } php_sample_globals;
    php_sample_globals sample_globals;

    PHP_MINIT_FUNCTION(sample)
    {
        php_sample_globals_ctor(&sample_globals TSRMLS_CC);
        return SUCCESS;
    }

首先注意到的是这里并没有定义一个 int 型的标识去引用全局的结构定义，只是简单的在进程的全局空间定义了一个结构体。也就是说 `SAMPLE_G(sampleint) = 5;` 展开后就是 `sample_globals.sampleint = 5;` 简单，快速，高效。非线程构建还有进程隔离的优势，这样给定的请求碰到完全出乎意料的情况时，它也不会影响其他进程，即便是产生段错误也不会导致整个 Web Server 瘫痪。实际上，Apache 的 `MaxRequestsPerChild` 指令就是设计用来提升这个特性的，它经常性的有目的性的 kill 掉子进程并产生新的子进程，来避免某些可能由于进程长时间运行“累积”而来的问题（比如内存泄露）。

### 访问全局变量

在创建一个扩展时，你并不知道它最终的运行环境是否是线程安全的。幸运的是，你要使用的标准包含文件集合中已经包含了条件定义的 ZTS 预处理标记。当 PHP 因为 SAPI 需要或通过 `enable-maintainer-zts` 选项安装等原因以线程安全方式构建时，这个值会被自动的定义，并可以用一组 `#ifdef ZTS` 这样的指令集去测试它的值。就像你前面看到的，只有在 PHP 以线程安全方式编译时，才会存在线程安全池，只有线程安全池存在时，才会真的在线程安全池中分配空间。这就是为什么前面的例子包裹在ZTS检查中的原因，非线程方式供非线程构建使用。在本章前面 `PHP_MINIT_FUNCTION(myextension)` 的例子中，你可以看到 `#ifdef ZTS` 被用作条件调用正确的全局初始代码。对于 ZTS 模式它使用 `ts_allocate_id()` 弹出 `myextension_globals_id` 变量，而非 ZTS 模式只是直接调用 `myextension_globals` 的初始化方法。这两个变量已经在你的扩展源文件中使用 Zend 宏：`DECLARE_MODULE_GLOBALS(myextension)` 声明，它将自动的处理对 ZTS 的测试并依赖构建的 ZTS 模式选择正确的方式声明。在访问这些全局变量的时候，你需要使用前面给出的自定义宏 `SAMPLE_G()`。在第 12 章，你将学习到怎样设计这个宏以使它可以依赖 ZTS 模式自动展开。

### 即便你不需要线程也要考虑线程

正常的 PHP 构建默认是关闭线程安全的，只有在被构建的 SAPI 明确需要线程安全或线程安全在 `./configure` 阶段显式的打开时，才会以线程安全方式构建。给出了全局查找的速度问题和进程隔离的缺点后，你可能会疑惑为什么明明不需要还有人故意打开它呢？这是因为，多数情况下，扩展和 SAPI 的开发者认为你是线程安全开关的操作者，这样做可以很大程度上确保新代码可以在所有环境中正常运行。当线程安全启用时，一个名为 `tsrm_ls` 的特殊指针被增加到了很多的内部函数原型中。这个指针允许 PHP 区分不同线程的数据。回想一下本章前面 ZTS 模式下的 `SAMPLE_G()` 宏函数中就使用了它。没有它，正在执行的函数就不知道查找和设置哪个线程的符号表；不知道应该执行哪个脚本，引擎也完全无法跟踪它的内部寄存器。这个指针保留了线程处理的所有页面请求。

这个可选的指针参数通过下面一组定义包含到原型中。当 ZTS 禁用时，这些定义都被展开为空；当 ZTS 开启时，它们展开如下：

    #define TSRMLS_D     void ***tsrm_ls
    #define TSRMLS_DC     , void ***tsrm_ls
    #define TSRMLS_C     tsrm_ls
    #define TSRMLS_CC     , tsrm_ls

非 ZTS 构建对下面的代码看到的是两个参数：`int`，`char *`。在 ZTS 构建下，原型则包含三个参数：`int`，`char *`，`void ***`。当你的程序调用这个函数时，只有在 ZTS 启用时才需要传递第三个参数。下面代码的第二行展示了宏的展开：

    int php_myext_action(int action_id, char *message TSRMLS_DC);
    php_myext_action(42, "The meaning of life" TSRMLS_CC);

通过在函数调用中包含这个特殊的变量，`php_myext_action` 就可以使用 `tsrm_ls` 的值和 `MYEXT_G()` 宏函数一起访问它的线程特有全局数据。在非 ZTS 构建上，`tsrm_ls` 将不可用，但是这是 ok 的，因为此时 `MYEXT_G()` 宏函数以及其他类似的宏都不会使用它。现在考虑，你在一个新的扩展上工作，并且有下面的函数，它可以在你本地使用 CLI SAPI 的构建上正常工作，并且即便使用 Apache 1 的 APXS SAPI 编译也可以正常工作：

    static int php_myext_isset(char *varname, int varname_len)
    {
        zval **dummy;


        if (zend_hash_find(EG(active_symbol_table),
            varname, varname_len + 1,
            (void**)&dummy) == SUCCESS) {
            /* Variable exists */
            return 1;
        } else {
            /* Undefined variable */
            return 0;
        }
    }

所有的一切看起来都工作正常，你打包这个扩展发送给他人构建并运行在生产服务器上。让你气馁的是，对方报告扩展编译失败。事实上它们使用了 Apache 2.0 的线程模式，因此它们的 PHP 构建启用了 ZTS。当编译期碰到你使用的 `EG()` 宏函数时，它尝试在本地空间查找 `tsrm_ls` 没有找到，因为你并没有定义它并且没有在你的函数中传递。修复这个问题非常简单；只需要在 `php_myext_isset()` 的定义上增加 `TSRMLS_DC`，并在每行调用它的地方增加 `TSRMLS_CC`。不幸的是，现在对方已经有点不信任你的扩展质量了，这样就会推迟你的演示周期。这种问题越早解决越好。现在有了 `enable-maintainer-zts` 指令。通过在 `./configure` 时增加该指令来构建 PHP，你的构建将自动的包含 ZTS，哪怕你当前的 SAPI（比如 CLI）不需要它。打开这个开关，你可以避免这些常见的不应该出现的错误。注意：在 PHP 4 中，`enable-maintainer-zts` 标记等价的名字是 `enable-experimental-zts`；请确认使用你的 PHP 版本对应的正确标记。

### 寻回丢失的 tsrm_ls

有时，我们需要在一个函数中使用 `tsrm_ls` 指针，但却不能传递它。通常这是因为你的扩展作为某个使用回调的库的接口，它并没有提供返回抽象指针的地方。考虑下面的代码片段：

    void php_myext_event_callback(int eventtype, char *message)
    {
        zval *event;

        /* $event = array('event'=>$eventtype,
                        'message'=>$message) */
        MAKE_STD_ZVAL(event);
        array_init(event);
        add_assoc_long(event, "type", eventtype);
        add_assoc_string(event, "message", message, 1);


        /* $eventlog[] = $event; */
        add_next_index_zval(EXT_G(eventlog), event);
    }
    PHP_FUNCTION(myext_startloop)
    {
        /* The eventlib_loopme() function,
         * exported by an external library,
         * waits for an event to happen,
         * then dispatches it to the
         * callback handler specified.
         */
        eventlib_loopme(php_myext_event_callback);
    }

虽然你可能不完全理解这段代码，但你应该注意到了回调函数中使用了 `EXT_G()` 宏函数，我们知道在线程安全构建下它需要 `tsrm_ls` 指针。修改函数原型并不好也不应该这样做，因为外部的库并不知道 PHP 的线程安全模型。那这种情况下怎样让 `tsrm_ls` 可用呢？解决方案是前面提到的名为 `TSRMLS_FETCH()` 的 Zend 宏函数。将它放到代码片段的顶部，这个宏将执行给予当前线程上下文的查找，并定义本地的 `tsrm_ls` 指针拷贝。这个宏可以在任何地方使用并且不用通过函数调用传递 `tsrm_ls`，尽管这看起来很诱人，但是，要注意到这一点：`TSRMLS_FETCH` 调用需要一定的处理时间。这在单次迭代中并不明显，但是随着你的线程数增多，随着你调用 `TSRMLS_FETCH()` 的点的增多，你的扩展就会显现出这个瓶颈。因此，请谨慎的使用它。注意：为了和 C++ 编译器兼容，请确保将 `TSRMLS_FETCH()` 和所有变量定义放在给定块作用域的顶部（任何其他语句之前）。因为 `TSRMLS_FETCH()` 宏自身有多种不同的解析方式，因此最好将它作为变量定义的最后一行。

1.5 PHP 的生命周期
----------------

这一章讲述了一些后续章节需要的基础概念，是你编写优质的 PHP 扩展的基础。
